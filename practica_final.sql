/*
    PRACTICA FINAL
*/
    
    
/*
    PACKAGE FACTURAS
*/


/*
    1. Creación de tablas
*/


CREATE TABLE productos (
    cod_producto    NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    nombre_producto VARCHAR2(50 BYTE),
    pvp             NUMBER,
    total_vendidos  NUMBER
);

CREATE TABLE facturas (
    cod_factura NUMBER(5, 0)
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    fecha       DATE,
    descripcion VARCHAR2(100 BYTE)
);

CREATE TABLE lineas_factura (
    cod_factura  NUMBER,
    cod_producto NUMBER,
    PRIMARY KEY ( cod_factura,
                  cod_producto ),
    CONSTRAINT fk_cod_factura FOREIGN KEY ( cod_factura )
        REFERENCES facturas ( cod_factura ),
    CONSTRAINT fk_cod_producto FOREIGN KEY ( cod_producto )
        REFERENCES productos ( cod_producto ),
    pvp          NUMBER,
    unidades     NUMBER,
    fecha        DATE
);

CREATE TABLE control_log (
    id  NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    usuario VARCHAR2(50),
    fecha         DATE,
    tabla         VARCHAR2(20),
    cod_operacion CHAR(1 BYTE)
);


/*
    Introducción de datos
*/
Insert into HR.PRODUCTOS (COD_PRODUCTO,NOMBRE_PRODUCTO,PVP,TOTAL_VENDIDOS) 
values ('1','TORNILLO','1', null);


Insert into HR.PRODUCTOS (COD_PRODUCTO,NOMBRE_PRODUCTO,PVP,TOTAL_VENDIDOS) 
values ('2','TUERCA','5', null);


Insert into HR.PRODUCTOS (COD_PRODUCTO,NOMBRE_PRODUCTO,PVP,TOTAL_VENDIDOS) 
values ('3','ARANDELA','4', null);


Insert into HR.PRODUCTOS (COD_PRODUCTO,NOMBRE_PRODUCTO,PVP,TOTAL_VENDIDOS) 
values ('4','MARTILLO','40', null);

Insert into HR.PRODUCTOS (COD_PRODUCTO,NOMBRE_PRODUCTO,PVP,TOTAL_VENDIDOS) 
values ('5','CLAVO','1', null);


/*
    PAQUETES FACTURA
*/

CREATE OR REPLACE PACKAGE FACTURAS_PKG
IS
    -- Definición de procedimientos
    PROCEDURE P_ALTA_FACTURA(p_codigo_factura NUMBER, p_fecha DATE, p_descripcion VARCHAR2);
    
    PROCEDURE P_BAJA_FACTURA(p_codigo_factura NUMBER);
    
    PROCEDURE P_MODIFICAR_DESCRIPCION_FACTURA(p_codigo_factura NUMBER, p_descripcion VARCHAR2);
    
    PROCEDURE P_MODIFICAR_FECHA_FACTURA(p_codigo_factura NUMBER, p_fecha DATE);
   
 
    -- Definición de funciones
    FUNCTION NUM_FACTURAS (p_fecha_inicio DATE, p_fecha_fin DATE) RETURN NUMBER;
    
    FUNCTION TOTAL_FACTURA(p_codigo_factura NUMBER) RETURN NUMBER; 

END FACTURAS_PKG;
/


CREATE OR REPLACE PACKAGE BODY FACTURAS_PKG
AS
    
    
    -- Funcion propia
    FUNCTION EXISTENCIA_FACTURA
    (
        p_codigo_factura NUMBER
    )
    RETURN BOOLEAN
    AS
        -- Definición de variables
        cantidad NUMBER;
    BEGIN
        
        -- Ver la cantidad de registro
        SELECT 
            COUNT(*)
        INTO
            cantidad
        FROM
            facturas
        WHERE cod_factura = p_codigo_factura;
        
        IF cantidad > 0 THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END EXISTENCIA_FACTURA;
    
    
    -- Alta
    PROCEDURE P_ALTA_FACTURA
    (
        p_codigo_factura NUMBER,
        p_fecha DATE, 
        p_descripcion VARCHAR2
    )
    IS
    BEGIN
        -- Verificar que no existe otra factura con el mismo codigo
        IF EXISTENCIA_FACTURA(p_codigo_factura) = FALSE THEN
            
            -- Se ingresa la información
            INSERT INTO FACTURAS(cod_factura, fecha, descripcion)
            VALUES (p_codigo_factura, p_fecha, p_descripcion);
            
        ELSE
            RAISE_APPLICATION_ERROR(-20008, 'Ya existe el codigo de factura');
        END IF;
       
    END P_ALTA_FACTURA;
    
    
    -- Baja
    PROCEDURE P_BAJA_FACTURA
    (
        p_codigo_factura NUMBER
    )
    IS
    BEGIN
         -- Verificar que no existe otra factura con el mismo codigo
        IF EXISTENCIA_FACTURA(p_codigo_factura) = TRUE THEN
            
            -- Se elimina el registro
            DELETE 
                FROM FACTURAS
            WHERE
                cod_factura = p_codigo_factura;
        ELSE
            RAISE_APPLICATION_ERROR(-20009, 'No existe el codigo de factura');
        END IF;
    END P_BAJA_FACTURA;


    -- Modificar descripción
        PROCEDURE P_MODIFICAR_DESCRIPCION_FACTURA
        (
            p_codigo_factura NUMBER, 
            p_descripcion VARCHAR2
        )
        IS
        BEGIN
            IF EXISTENCIA_FACTURA(p_codigo_factura) = TRUE THEN
            
            -- Se actualiza la descripción
            UPDATE 
                FACTURAS
            SET 
                descripcion = p_descripcion
            WHERE
                cod_factura = p_codigo_factura;
        ELSE
            RAISE_APPLICATION_ERROR(-20010, 'No existe el codigo de factura');
        END IF;
        END P_MODIFICAR_DESCRIPCION_FACTURA;
  
        
        -- Modificar fecha
        PROCEDURE P_MODIFICAR_FECHA_FACTURA
        (
            p_codigo_factura NUMBER, 
            p_fecha DATE
        )
        IS
        BEGIN
            IF EXISTENCIA_FACTURA(p_codigo_factura) = TRUE THEN
            
            -- Se actualiza la fecha
            UPDATE 
                facturas
            SET 
                fecha = p_fecha
            WHERE
                cod_factura = p_codigo_factura;
        ELSE
            RAISE_APPLICATION_ERROR(-20010, 'No existe el codigo de factura');
        END IF;
        END P_MODIFICAR_FECHA_FACTURA;
        
        
        -- Número de facturas
        FUNCTION NUM_FACTURAS 
        (
            p_fecha_inicio DATE,
            p_fecha_fin DATE
        ) 
        RETURN NUMBER
        IS
            -- Declaración de variables
            numero_facturas NUMBER;
        BEGIN
            SELECT
                COUNT(*)
            INTO
                numero_facturas
            FROM 
                facturas
            WHERE
                fecha BETWEEN p_fecha_inicio AND p_fecha_fin;
                
            RETURN numero_facturas;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    RETURN 0;
        END NUM_FACTURAS;


        -- Total de factura
        FUNCTION TOTAL_FACTURA
        (
            p_codigo_factura NUMBER
        ) 
        RETURN NUMBER
        IS
            total NUMBER;
        BEGIN
        
            SELECT
                SUM(pvp * unidades)
            INTO
                total
            FROM 
                lineas_factura 
            WHERE cod_factura = p_codigo_factura;
                
            RETURN total;
            
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    RETURN 0;
        END TOTAL_FACTURA;
        

    
END FACTURAS_PKG;
/


/*
    UTILIZACIÓN
*/

SET SERVEROUTPUT ON
DECLARE
BEGIN
    -- Probar alta
        --FACTURAS_PKG.P_ALTA_FACTURA(1, '12/2/2010', 'Descripcion 1');
        FACTURAS_PKG.P_ALTA_FACTURA(2, '12/12/2011', 'Descripcion 3');

    -- Probar baja factura
        --FACTURAS_PKG.P_BAJA_FACTURA(2);
        --FACTURAS_PKG.P_BAJA_FACTURA(3);
    
    -- Probar modificar descripcion
        --FACTURAS_PKG.P_MODIFICAR_DESCRIPCION_FACTURA(2, 'Descripcion 1.1');
    
    -- Probar fecha
        -- FACTURAS_PKG.P_MODIFICAR_FECHA_FACTURA(1, '12/12/2010');
        -- FACTURAS_PKG.P_MODIFICAR_FECHA_FACTURA(1, '12/12/2010');

    -- Cantidad facturas
        dbms_output.put_line(FACTURAS_PKG.NUM_FACTURAS('09/09/2010', '12/12/2020'));

END;
/


/*
    PACKAGE LINEA_FACTURAS
*/


CREATE OR REPLACE PACKAGE LINEA_FACTUTAS_PKG
IS
    -- Definicion de procedimientos
    PROCEDURE ALTA_LINEA (p_cod_factura NUMBER, p_cod_producto NUMBER, p_unidades NUMBER, p_fecha DATE);
    
    PROCEDURE BAJA_LINEA (p_cod_factura NUMBER, p_cod_producto NUMBER);
    
    PROCEDURE MOD_PRODUCTO(p_cod_factura NUMBER, p_cod_producto NUMBER, p_unidades NUMBER);

    PROCEDURE MOD_PRODUCTO(p_cod_factura NUMBER, p_cod_producto NUMBER, p_fecha DATE);

    
END LINEA_FACTUTAS_PKG;
/


CREATE OR REPLACE PACKAGE BODY LINEA_FACTUTAS_PKG 
IS

    -- Verificar que existe la factura
    FUNCTION EXISTENCIA_FACTURA
    (
        p_codigo_factura NUMBER
    )
    RETURN BOOLEAN
    AS
        -- Definición de variables
        cantidad NUMBER;
    BEGIN
        
        -- Ver la cantidad de registro
        SELECT 
            COUNT(*)
        INTO
            cantidad
        FROM
            facturas
        WHERE cod_factura = p_codigo_factura;
        
        IF cantidad > 0 THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END EXISTENCIA_FACTURA;
    
    
    -- Verificar que existe el producto
    FUNCTION EXISTENCIA_PRODUCTO
    (
        p_codigo_producto NUMBER
    )
    RETURN BOOLEAN
    AS
        -- Definición de variables
        cantidad NUMBER;
    BEGIN
        
        -- Ver la cantidad de registro
        SELECT 
            COUNT(*)
        INTO
            cantidad
        FROM
            productos
        WHERE cod_producto = p_codigo_producto;
        
        IF cantidad > 0 THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END EXISTENCIA_PRODUCTO;
    
    
    /*
        PROCEDIMIENTOS
    */  
    
    -- Alta
    PROCEDURE ALTA_LINEA 
    (
        p_cod_factura NUMBER, 
        p_cod_producto NUMBER, 
        p_unidades NUMBER, 
        p_fecha DATE
    )
    IS
        -- Declaración de variables
        v_pvp NUMBER;
    BEGIN
        
        -- Obteniendo el pvp del producto
        SELECT
            pvp
        INTO
            v_pvp
        FROM
            productos
        WHERE 
            cod_producto = p_cod_producto;
            
            INSERT INTO lineas_factura (cod_factura, cod_producto, pvp,unidades, fecha)
            VALUES(p_cod_factura, p_cod_producto, v_pvp, p_unidades, p_fecha);
        
    END ALTA_LINEA;
    
    
    -- Baja
    PROCEDURE BAJA_LINEA 
    (
        p_cod_factura NUMBER, 
        p_cod_producto NUMBER
    )
    IS
    BEGIN
        IF EXISTENCIA_FACTURA(p_cod_factura)= TRUE AND EXISTENCIA_PRODUCTO(p_cod_producto) = TRUE THEN

            DELETE FROM 
                lineas_factura
            WHERE 
                cod_factura = p_cod_factura AND cod_producto  = p_cod_producto;
        
        ELSE
            RAISE_APPLICATION_ERROR(-20010, 'No existe el codigo');
        END IF;
    END BAJA_LINEA;


        -- Modificar producto unidades (Sobrecarga)
        PROCEDURE MOD_PRODUCTO
        (
            p_cod_factura NUMBER, 
            p_cod_producto NUMBER, 
            p_unidades NUMBER
        )
        IS
        BEGIN
            IF EXISTENCIA_FACTURA(p_cod_factura) = TRUE AND EXISTENCIA_PRODUCTO(p_cod_producto) = TRUE THEN

            UPDATE lineas_factura
            SET unidades = p_unidades
            WHERE 
                cod_factura = p_cod_factura AND cod_producto  = p_cod_producto;
        
        ELSE
            RAISE_APPLICATION_ERROR(-20010, 'No existe el codigo');
        END IF;
        END MOD_PRODUCTO;


        -- Modificar producto fecha (Sobrecarga)
        PROCEDURE MOD_PRODUCTO
        (
            p_cod_factura NUMBER, 
            p_cod_producto NUMBER, 
            p_fecha DATE
        )
        IS
        BEGIN
            IF EXISTENCIA_FACTURA(p_cod_factura) = TRUE AND EXISTENCIA_PRODUCTO(p_cod_producto) = TRUE THEN

            UPDATE lineas_factura
            SET fecha = p_fecha
            WHERE 
                cod_factura = p_cod_factura AND cod_producto  = p_cod_producto;
        
        ELSE
            RAISE_APPLICATION_ERROR(-20010, 'No existe el codigo');
        END IF;
        END MOD_PRODUCTO;

END LINEA_FACTUTAS_PKG;
/


/*
    UTILIZACIÓN
*/

SET SERVEROUTPUT ON
DECLARE
    fecha DATE;
BEGIN
    -- Alta
        -- LINEA_FACTUTAS_PKG.ALTA_LINEA(1,3, 100, SYSDATE);
    
    -- Baja
        --LINEA_FACTUTAS_PKG.BAJA_LINEA(1,3);
        
    -- Modificar unidades(Sobre carga)
        --LINEA_FACTUTAS_PKG.MOD_PRODUCTO(1,1,99);
    
    -- Modificar fecha
    --fecha := SYSDATE;
    LINEA_FACTUTAS_PKG.MOD_PRODUCTO(1,1,fecha);
    
END;
/


/*
    TRIGGERS
*/

--FACTURAS
CREATE OR REPLACE TRIGGER TR_FACTURAS
    BEFORE INSERT OR UPDATE OR DELETE ON facturas
BEGIN 
    
    -- Si se inserta
    IF INSERTING THEN
        INSERT INTO control_log(usuario, fecha, tabla, cod_operacion )
        VALUES(USER, SYSDATE, 'FACTURAS', 'I');
    END IF;
    
    -- Si se modifica
    IF UPDATING THEN
        INSERT INTO control_log(usuario, fecha, tabla, cod_operacion )
        VALUES(USER, SYSDATE, 'FACTURAS', 'U');
    END IF;
    
    -- Si se elimina
    IF DELETING THEN
        INSERT INTO control_log(usuario, fecha, tabla, cod_operacion )
        VALUES(USER, SYSDATE, 'Facturas', 'D');
    END IF;
END;
/


-- Linea factura
CREATE OR REPLACE TRIGGER TR_LINEAS_FACTURAS
    BEFORE INSERT OR UPDATE OR DELETE ON lineas_factura 
BEGIN 
    
    -- Si se inserta
    IF INSERTING THEN
        INSERT INTO control_log(usuario, fecha, tabla, cod_operacion )
        VALUES(USER, SYSDATE, 'LINEAS FACTURAS', 'I');
    END IF;
    
    -- Si se modifica
    IF UPDATING THEN
        INSERT INTO control_log(usuario, fecha, tabla, cod_operacion )
        VALUES(USER, SYSDATE, 'LINEAS FACTURAS', 'U');
    END IF;
    
    -- Si se elimina
    IF DELETING THEN
        INSERT INTO control_log(usuario, fecha, tabla, cod_operacion )
        VALUES(USER, SYSDATE, 'LINEAS FACTURAS', 'D');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER TR_PRODUCTO
AFTER INSERT OR DELETE OR UPDATE ON lineas_factura
FOR EACH ROW
BEGIN
    
    IF INSERTING THEN
    
        -- Actualizar tabla total_vendidos
        UPDATE 
            productos
        SET
            total_vendidos = total_vendidos + :NEW.unidades
        WHERE
            cod_producto = :NEW.cod_producto;
            
        -- Actualizar tabla pvp (total del producto disponible)
        UPDATE 
            productos
        SET
            pvp = pvp - :NEW.unidades
        WHERE
            cod_producto = :NEW.cod_producto;
    END IF;
    
    IF UPDATING THEN
    
        -- Actualizar tabla total_vendidos
        UPDATE 
                productos
            SET
                total_vendidos = total_vendidos - (:OLD.unidades - :NEW.unidades)
            WHERE
                cod_producto = :NEW.cod_producto;
        
        -- Actualizar tabla pvp (total del producto disponible)
        UPDATE 
            productos
        SET
            pvp = pvp + (:OLD.unidades - :NEW.unidades)
        WHERE
            cod_producto = :NEW.cod_producto;

    END IF;
    
    
    
    IF DELETING THEN
    
        -- Actualizar tabla total_vendidos
        UPDATE 
                productos
            SET
                total_vendidos = total_vendidos - :OLD.unidades
            WHERE
                cod_producto = :OLD.cod_producto;
        
        -- Actualizar tabla pvp (total del producto disponible)
        UPDATE 
            productos
        SET
            pvp = pvp + :OLD.unidades
        WHERE
            cod_producto = :OLD.cod_producto;

    END IF;
    
    
END;
/


SELECT * FROM productos;
SELECT * FROM FACTURAS;
SELECT * from lineas_factura;

INSERT INTO lineas_factura
VALUES(2, 1, 1, 5, SYSDATE);

INSERT INTO FACTURAS
VALUES(1, SYSDATE, 'Descripcion 1.1');


DELETE FROM lineas_factura
WHERE COD_FACTURA = 2;

UPDATE PRODUCTOS
SET pvp = 100
WHERE COD_PRODUCTO = 1;

UPDATE PRODUCTOS
SET total_vendidos = 0
WHERE COD_PRODUCTO = 1;

UPDATE 
    lineas_factura
SET 
    unidades = 10
WHERE
    cod_factura = 2;
    

